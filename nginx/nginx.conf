worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;


    # Define upstreams for backend services
    upstream client_app {
        server client:80; # Internal port defined in client's Dockerfile (Nginx)
    }

    upstream server_app {
        # Use keepalive for efficiency, especially for WebSocket
        server server:3000; # Internal port for the game server
        keepalive 8;
    }

    upstream data_server_app {
        server data_server:3001; # Internal port for the data server
    }

    server {
        listen 80;
        # Replace localhost with your actual domain name if needed
        server_name localhost ${DOMAIN_NAME};

        # Proxy requests to the data server API
        location /api/data/ {
            proxy_pass http://data_server_app/; # Forward to data_server root
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy WebSocket connections to the game server
        location /socket.io/ {
            proxy_pass http://server_app; # Forward to game server root
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy other specific server endpoints if needed (e.g., /ping)
        location /ping {
             proxy_pass http://server_app;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
        }
         location /health { # Health check for data server
             proxy_pass http://data_server_app;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
        }
         location /room-count { # Room count from game server
             proxy_pass http://server_app;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
        }


        # Proxy all other requests to the client application
        location / {
            proxy_pass http://client_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Optional: Add error pages
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #    root /usr/share/nginx/html; # Or a specific error page directory
        # }
    }
}